{"version":3,"sources":["components/TextArea.js","components/Buttons.js","components/Table.js","components/dataProcessing.js","components/FactCard.js","components/ErrorMessage.js","App.js","reportWebVitals.js","index.js"],"names":["TextArea","typing","id","cols","rows","onChange","Buttons","analyze","newRecipe","data","className","onClick","Table","inputs","s_no","map","item","i","error","Math","round","calories","totalWeight","toFixed","dataProcessing","props","console","log","processed_data","Calories","totalNutrients","Total_Fat","Sat_Fat","Trans_Fat","Cholesterol","Sodium","Total_Carbs","Dietary_Fiber","Total_Sugars","Protein","Vitamin_D","Calcium","Iron","Potassium","daily_value","units","element","forEach","totalDaily","FAT","quantity","FASAT","FATRN","CHOLE","NA","CHOCDF","FIBTG","SUGAR","PROCNT","VITD","CA","FE","K","unit","FactCard","colSpan","ErrorMessage","App","e","input","target","value","input_arr","split","undefined","fetchData","window","location","reload","app_id","app_key","state","Promise","all","this","fetch","then","response","json","single_data","catch","alert","setState","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c486fb4e.chunk.js","sourcesContent":["import React from \"react\";\r\n \r\nconst TextArea = ({typing}) => {\r\n    return(\r\n        <p id=\"textArea\">\r\n            <textarea id=\"demoAnalysis\" cols=\"30\" rows=\"10\" onChange={typing}>\r\n\r\n            </textarea>\r\n        </p>\r\n    );\r\n}\r\n\r\nexport default TextArea;","import React from \"react\";\r\n\r\nconst Buttons = ({analyze, newRecipe, data}) => {\r\n    return(\r\n        <div>\r\n            <button className=\"btn btn-success btn-sm m-2\" onClick={analyze}>Analyze</button>\r\n            {(data)?<button className=\"btn btn-success btn-sm m-2\" onClick={newRecipe}>New recipe</button>:\"\"}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Buttons;","import React from \"react\";\r\n\r\nconst Table = ({data, inputs}) => {\r\n    let s_no = 0;\r\n    return(\r\n        <table className=\"table\">\r\n            <thead>\r\n                <tr>\r\n                    <th>S.no</th>\r\n                    <th>Item</th>\r\n                    <th>Calories</th>\r\n                    <th>Weight</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {   \r\n                    data.map((item, i) => {\r\n                        if(!item.error) {\r\n                            {s_no++;}\r\n                            return(\r\n                                <tr>\r\n                                    <th>{s_no}</th>\r\n                                    <td>{inputs[i]}</td>\r\n                                    <td>{Math.round(item.calories)} kcal</td>\r\n                                    <td>{item.totalWeight.toFixed(1)} g</td>\r\n                                </tr>\r\n                            )\r\n                        }\r\n                    })\r\n                }                \r\n            </tbody>\r\n        </table>\r\n    );\r\n}\r\n\r\nexport default Table;","\r\nconst dataProcessing = (props) => {\r\n\r\n    console.log(props);\r\n    let processed_data = {\r\n        Calories : 0,\r\n        totalNutrients: {\r\n            Total_Fat: \"\",\r\n            Sat_Fat: \"\",\r\n            Trans_Fat:  \"\",\r\n            Cholesterol: \"\",\r\n            Sodium: \"\",\r\n            Total_Carbs: \"\",\r\n            Dietary_Fiber:  \"\",\r\n            Total_Sugars: \"\",\r\n            Protein: \"\",\r\n            Vitamin_D: \"\",\r\n            Calcium: \"\",\r\n            Iron: \"\",\r\n            Potassium: \"\"\r\n        },\r\n        daily_value: {\r\n            Total_Fat: \"\",\r\n            Sat_Fat: \"\",\r\n            Cholesterol: \"\",\r\n            Sodium: \"\",\r\n            Total_Carbs: \"\",\r\n            Dietary_Fiber:  \"\",\r\n            Protein: \"\",\r\n            Vitamin_D: \"\",\r\n            Calcium: \"\",\r\n            Iron: \"\",\r\n            Potassium: \"\"\r\n        },\r\n        units : {\r\n            Total_Fat: \"\",\r\n            Sat_Fat: \"\",\r\n            Trans_Fat:  \"\",\r\n            Cholesterol: \"\",\r\n            Sodium: \"\",\r\n            Total_Carbs: \"\",\r\n            Dietary_Fiber:  \"\",\r\n            Total_Sugars: \"\",\r\n            Protein: \"\",\r\n            Vitamin_D: \"\",\r\n            Calcium: \"\",\r\n            Iron: \"\",\r\n            Potassium: \"\"\r\n        }\r\n    }\r\n\r\n    props.forEach(data => {\r\n        if(!data.error) {\r\n            let totalNutrients = data.totalNutrients;\r\n            let totalDaily = data.totalDaily;\r\n\r\n            // calories\r\n            processed_data.Calories += data.calories;\r\n\r\n            // totalNutrients value\r\n            processed_data.totalNutrients.Total_Fat = +processed_data.totalNutrients.Total_Fat + +((totalNutrients.FAT)?totalNutrients.FAT.quantity:\"\");\r\n            processed_data.totalNutrients.Sat_Fat = +processed_data.totalNutrients.Sat_Fat + +((totalNutrients.FASAT)?totalNutrients.FASAT.quantity:\"\");\r\n            processed_data.totalNutrients.Trans_Fat = +processed_data.totalNutrients.Trans_Fat + +((totalNutrients.FATRN)?totalNutrients.FATRN.quantity:\"\");\r\n            processed_data.totalNutrients.Cholesterol = +processed_data.totalNutrients.Cholesterol + +((totalNutrients.CHOLE)?totalNutrients.CHOLE.quantity:\"\");\r\n            processed_data.totalNutrients.Sodium = +processed_data.totalNutrients.Sodium + +((totalNutrients.NA)?totalNutrients.NA.quantity:\"\");\r\n            processed_data.totalNutrients.Total_Carbs = +processed_data.totalNutrients.Total_Carbs + +((totalNutrients.CHOCDF)?totalNutrients.CHOCDF.quantity:\"\");\r\n            processed_data.totalNutrients.Dietary_Fiber = +processed_data.totalNutrients.Dietary_Fiber + +((totalNutrients.FIBTG)?totalNutrients.FIBTG.quantity:\"\");\r\n            processed_data.totalNutrients.Total_Sugars = +processed_data.totalNutrients.Total_Sugars + +((totalNutrients.SUGAR)?totalNutrients.SUGAR.quantity:\"\");\r\n            processed_data.totalNutrients.Protein = +processed_data.totalNutrients.Protein + +((totalNutrients.PROCNT)?totalNutrients.PROCNT.quantity:\"\");\r\n            processed_data.totalNutrients.Vitamin_D = +processed_data.totalNutrients.Vitamin_D + +((totalNutrients.VITD)?totalNutrients.VITD.quantity:\"\");\r\n            processed_data.totalNutrients.Calcium = +processed_data.totalNutrients.Calcium + +((totalNutrients.CA)?totalNutrients.CA.quantity:\"\");\r\n            processed_data.totalNutrients.Iron = +processed_data.totalNutrients.Iron + +((totalNutrients.FE)?totalNutrients.FE.quantity:\"\");\r\n            processed_data.totalNutrients.Potassium = +processed_data.totalNutrients.Potassium + +((totalNutrients.K)?totalNutrients.K.quantity:\"\");\r\n\r\n            // daily_value\r\n            processed_data.daily_value.Total_Fat = +processed_data.daily_value.Total_Fat + +((totalDaily.FAT)?totalDaily.FAT.quantity:\"\");\r\n            processed_data.daily_value.Sat_Fat = +processed_data.daily_value.Sat_Fat + +((totalDaily.FASAT)?totalDaily.FASAT.quantity:\"\");\r\n            processed_data.daily_value.Cholesterol = +processed_data.daily_value.Cholesterol + +((totalDaily.CHOLE)?totalDaily.CHOLE.quantity:\"\");\r\n            processed_data.daily_value.Sodium = +processed_data.daily_value.Sodium + +((totalDaily.NA)?totalDaily.NA.quantity:\"\");\r\n            processed_data.daily_value.Total_Carbs = +processed_data.daily_value.Total_Carbs + +((totalDaily.CHOCDF)?totalDaily.CHOCDF.quantity:\"\");\r\n            processed_data.daily_value.Dietary_Fiber = +processed_data.daily_value.Dietary_Fiber + +((totalDaily.FIBTG)?totalDaily.FIBTG.quantity:\"\");\r\n            processed_data.daily_value.Protein = +processed_data.daily_value.Protein + +((totalDaily.PROCNT)?totalDaily.PROCNT.quantity:\"\");\r\n            processed_data.daily_value.Vitamin_D = +processed_data.daily_value.Vitamin_D + +((totalDaily.VITD)?totalDaily.VITD.quantity:\"\");\r\n            processed_data.daily_value.Calcium = +processed_data.daily_value.Calcium + +((totalDaily.CA)?totalDaily.CA.quantity:\"\");\r\n            processed_data.daily_value.Iron = +processed_data.daily_value.Iron + +((totalDaily.FE)?totalDaily.FE.quantity:\"\");\r\n            processed_data.daily_value.Potassium = +processed_data.daily_value.Potassium + +((totalDaily.K)?totalDaily.K.quantity:\"\");\r\n\r\n            // totalNutrients unit\r\n            processed_data.units.Total_Fat = (totalNutrients.FAT)?totalNutrients.FAT.unit:processed_data.units.Total_Fat;\r\n            processed_data.units.Sat_Fat = (totalNutrients.FASAT)?totalNutrients.FASAT.unit:processed_data.units.Sat_Fat;\r\n            processed_data.units.Trans_Fat = (totalNutrients.FATRN)?totalNutrients.FATRN.unit:processed_data.units.Trans_Fat;\r\n            processed_data.units.Cholesterol = (totalNutrients.CHOLE)?totalNutrients.CHOLE.unit:processed_data.units.Cholesterol;\r\n            processed_data.units.Sodium = (totalNutrients.NA)?totalNutrients.NA.unit:processed_data.units.Sodium;\r\n            processed_data.units.Total_Carbs = (totalNutrients.CHOCDF)?totalNutrients.CHOCDF.unit:processed_data.units.Total_Carbs;\r\n            processed_data.units.Dietary_Fiber = (totalNutrients.FIBTG)?totalNutrients.FIBTG.unit:processed_data.units.Dietary_Fiber;\r\n            processed_data.units.Total_Sugars = (totalNutrients.SUGAR)?totalNutrients.SUGAR.unit:processed_data.units.Total_Sugars;\r\n            processed_data.units.Protein = (totalNutrients.PROCNT)?totalNutrients.PROCNT.unit:processed_data.units.Protein;\r\n            processed_data.units.Vitamin_D = (totalNutrients.VITD)?totalNutrients.VITD.unit:processed_data.units.Vitamin_D;\r\n            processed_data.units.Calcium = (totalNutrients.CA)?totalNutrients.CA.unit:processed_data.units.Calcium;\r\n            processed_data.units.Iron = (totalNutrients.FE)?totalNutrients.FE.unit:processed_data.units.Iron;\r\n            processed_data.units.Potassium = (totalNutrients.K)?totalNutrients.K.unit:processed_data.units.Potassium;\r\n\r\n        }\r\n    });\r\n    \r\n    processed_data.Calories = Math.round(processed_data.Calories);\r\n\r\n    // Concatenating units and round off\r\n    for(let element in processed_data.totalNutrients) {\r\n        if(processed_data.totalNutrients[element]===\"\") {\r\n            element = \"-\";\r\n        }\r\n        else {\r\n            processed_data.totalNutrients[element] = ((processed_data.totalNutrients[element]===0)? 0: processed_data.totalNutrients[element].toFixed(1)) +\" \"+ processed_data.units[element];\r\n        }\r\n    }\r\n\r\n    // Concatenating % and round off\r\n    for(let element in processed_data.daily_value) {\r\n        if(processed_data.daily_value[element]===\"\") {\r\n            processed_data.daily_value[element] = \"-\";\r\n        }\r\n        else {\r\n            processed_data.daily_value[element] = Math.round(processed_data.daily_value[element]) + \" %\";\r\n        }\r\n    } \r\n    \r\n    return(processed_data);\r\n}\r\n\r\nexport default dataProcessing;","import React from \"react\";\r\nimport dataProcessing from \"./dataProcessing\";\r\n\r\n\r\nconst FactCard = ({data}) => {\r\n    let processed_data = dataProcessing(data);\r\n    return(\r\n        <section id=\"factCard\">\r\n            <p className=\"h2 m-0 pt-3\" id=\"factTitle\">Nutrition Facts</p>\r\n            <table id=\"factTable\">\r\n                <thead>\r\n                    <tr>\r\n                        <th className=\"text-start\">Amount Per Serving</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <th className=\"calories text-start\">Calories</th>\r\n                        <td className=\"fw-bold\">{processed_data.Calories}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td className=\"small-info thickBorder text-end fw-bold\" colSpan=\"3\">% Daily Value*</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th className=\"factItems fw-bold\">Total Fat {processed_data.totalNutrients.Total_Fat}</th>\r\n                        <td className=\"factPercentage\">{processed_data.daily_value.Total_Fat}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th className=\"factItems\">Saturated Fat {processed_data.totalNutrients.Sat_Fat}</th>\r\n                        <td className=\"factPercentage\">{processed_data.daily_value.Sat_Fat}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th className=\"factItems\">Trans Fat {processed_data.totalNutrients.Trans_Fat}</th>\r\n                        <td className=\"factPercentage\"></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th className=\"factItems fw-bold\">Cholesterol {processed_data.totalNutrients.Cholesterol}</th>\r\n                        <td className=\"factPercentage\">{processed_data.daily_value.Cholesterol}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th className=\"factItems fw-bold\">Sodium {processed_data.totalNutrients.Sodium}</th>\r\n                        <td className=\"factPercentage\">{processed_data.daily_value.Sodium}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th className=\"factItems fw-bold\">Total Carbohydrate {processed_data.totalNutrients.Total_Carbs}</th>\r\n                        <td className=\"factPercentage\">{processed_data.daily_value.Total_Carbs}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th className=\"factItems\">Dietary Fiber {processed_data.totalNutrients.Dietary_Fiber}</th>\r\n                        <td className=\"factPercentage\">{processed_data.daily_value.Dietary_Fiber}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th className=\"factItems\">Total Sugars {processed_data.totalNutrients.Total_Sugars}</th>\r\n                        <td className=\"factPercentage\"></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th className=\"factItems\">Includes - Added Sugars</th>\r\n                        <td className=\"factPercentage\"></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th className=\"factItems fw-bold\">Protein {processed_data.totalNutrients.Protein}</th>\r\n                        <td className=\"factPercentage\" >{processed_data.daily_value.Protein}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th className=\"factItems\">Vitamin D {processed_data.totalNutrients.Vitamin_D}</th>\r\n                        <td className=\"factPercentage\">{processed_data.daily_value.Vitamin_D}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th className=\"factItems\">Calcium {processed_data.totalNutrients.Calcium}</th>\r\n                        <td className=\"factPercentage\">{processed_data.daily_value.Calcium}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th className=\"factItems\">Iron {processed_data.totalNutrients.Iron}</th>\r\n                        <td className=\"factPercentage\">{processed_data.daily_value.Iron}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th className=\"factItems\">Potassium {processed_data.totalNutrients.Potassium}</th>\r\n                        <td className=\"factPercentage\">{processed_data.daily_value.Potassium}</td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n            <p className=\"small-info mt-3\">*Percent Daily Values are based on a 2000 calorie diet</p>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default FactCard;","import React from \"react\";\r\n\r\nconst ErrorMessage = () => {\r\n    return(\r\n        <div className=\"error text-danger mt-1\">\r\n            We cannot calculate the nutrition for some ingredients. Please check the ingredient spelling or if you have entered a quantities for the ingredients.\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ErrorMessage;","import React,{ Component } from 'react';\nimport './App.css';\nimport TextArea from \"./components/TextArea\";\nimport Buttons from \"./components/Buttons\";\nimport Table from \"./components/Table\";\nimport FactCard from \"./components/FactCard\";\nimport ErrorMessage from './components/ErrorMessage';\n\nclass App extends Component {\n  \n  constructor() {\n    super();\n    this.app_id = \"721b26e3\";\n    this.app_key = \"d178b89f35e9ac6b0c980fac2e471851\";\n    this.input = \"\";\n    this.input_arr = [];\n    this.error = undefined;\n    this.state = {\n      data: undefined\n    }\n  }\n\n  typing = e => {\n    this.input = e.target.value;\n  }\n\n  analyze = () => {\n    this.input_arr = this.input.split(\"\\n\");\n    this.error = undefined;\n    this.fetchData();\n  }\n\n  fetchData() {\n    Promise.all(this.input_arr.map(element => {\n        return(fetch(`https://api.edamam.com/api/nutrition-data?app_id=${this.app_id}&app_key=${this.app_key}&ingr=${element}`)\n        .then(response => response.json())\n        .then((single_data) => {\n          this.error = (this.error)? \"bad_request\": single_data.error;\n          return single_data;\n        })\n        .catch(error => {\n          alert(error);\n          window.location.reload();\n        }));\n    }))\n    .then(data => {\n      if(data[0]) {\n        this.setState({data});\n      }\n    });\n  }\n\n  newRecipe = e => {\n    window.location.reload();\n  } \n\n  render() {\n    return (\n      <div className=\"container-fluid\">\n          <div className=\"container col-lg-9 col-xl-8\" id=\"container\">\n            <div className=\"row\">\n                <div className=\"col-md-12 bg-white \">\n                  <div className=\"row\">\n                    <div className=\"col-md-12\">\n                        <h1 className=\"text-center title\">Nutrition Analysis API Demo</h1>\n                    </div>\n                  </div>\n                  <div className=\"row\">\n                    <div className=\"text-center col-md-12\">\n                      <p className=\"notes\">Enter an ingredient list list for what you are cooking, like <span className=\"text-success\">\"1 cup rice, 10 oz chickpeas\"</span>, ect.\n                      <br/>\n                      Enter each ingredient on a new line.\n                      </p>\n                      <div className=\"col-12 col-sm-7 \" id=\"leftArea\">\n                        <TextArea typing={this.typing}/>\n                        <Buttons analyze={this.analyze} newRecipe={this.newRecipe} data={this.state.data}/>\n                        {(this.error)?<ErrorMessage/>:\"\"}\n                        <div className=\"demo-results\">\n                          <div className=\"col-12\">\n                            {(this.state.data)?<Table data={this.state.data} inputs={this.input_arr}/>:\"\"}\n                          </div>\n                        </div>\n                      </div>\n                      <div id=\"rightArea\" className=\"col-12 col-sm-5 \">\n                        <div className=\"fact-container\">\n                            {(this.state.data)?<FactCard data={this.state.data}/>:\"\"}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n            </div>\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}